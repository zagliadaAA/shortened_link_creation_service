#Этот конфигурационный файл настроен на генерацию моков для всех интерфейсов, расположенных в трех указанных пакетах
#(employee_usecase, order_usecase и position_usecase). Для каждого интерфейса будет сгенерирован соответствующий мок
#в директории mocks, причем имена файлов и мока будут формироваться по шаблонам. Также включена поддержка
#рекурсивного поиска интерфейсов в подкаталогах.

#issue-845-fix: True

exported: True
#Указывает, что необходимо генерировать моки только для экспортируемых (публичных) интерфейсов, то есть тех,
#имена которых начинаются с заглавной буквы.

with-expecter: True
#Этот параметр добавляет в сгенерированные моки методы для ожидания вызовов. Он используется,чтобы можно было задавать
#ожидания (expectations) для методов в моках, например, чтобы проверить, что методбыл вызван с определёнными параметрами.

disable-version-string: True
#Отключает добавление строки версии в сгенерированные файлы.Это полезно, чтобы не загрязнять код лишней информацией,
#если версия не имеет значения.

quiet: False
#Устанавливает уровень логирования в не тихий режим. Это значит, что инструмент будет выводить информацию о процессе
#генерации, например, сообщения об ошибках или предупреждениях.

keeptree: False
#Если True, структура каталогов будет сохранена, а если False (как в данном случае), то генерируемые моки будут помещены
#в папку, указанную в параметре dir. Указывает, что не нужно сохранять структуру директорий при создании моков. То есть
#моки будут сохраняться в одну папку, без сохранения исходной структуры каталогов исходных интерфейсов.


mockname: "{{.InterfaceName | camelcase| firstUpper}}"
#Указывает шаблон для именования файлов моков. Здесь используется шаблон для преобразования имени интерфейса в стиль
#CamelCase с первой заглавной буквой. Например, для интерфейса UserService будет создан мок с именем UserServiceMock.

outpkg: mocks
#Указывает, что генерируемые моки будут располагаться в пакете mocks.

filename: "{{.InterfaceName | snakecase}}.go"
#Устанавливает шаблон имени файла для мока. Интерфейс будет преобразован в стиль snake_case (например, интерфейс
#UserService станет файлом user_service.go).

dir: "{{.InterfaceDir}}/mocks"
#Определяет директорию, в которой будут размещены сгенерированные моки. Моки будут сохраняться в подкаталоге mocks
#относительно директории интерфейса.

packages:
#Содержит список пакетов, для которых нужно генерировать моки.

  shortened_link_creation_service/internal/usecase:
    #Настраивает генерацию моков для данного пакета.

    config:
      include-regex: ".*"
      #Генерация для выбранного интерфейса

      recursive: True
      #Поиск в подкаталогах

