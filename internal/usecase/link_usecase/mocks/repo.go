// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "shortened_link_creation_service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the repo type
type Repo struct {
	mock.Mock
}

type Repo_Expecter struct {
	mock *mock.Mock
}

func (_m *Repo) EXPECT() *Repo_Expecter {
	return &Repo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: link
func (_m *Repo) Create(link *domain.Link) (*domain.Link, error) {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Link) (*domain.Link, error)); ok {
		return rf(link)
	}
	if rf, ok := ret.Get(0).(func(*domain.Link) *domain.Link); ok {
		r0 = rf(link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Link) error); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - link *domain.Link
func (_e *Repo_Expecter) Create(link interface{}) *Repo_Create_Call {
	return &Repo_Create_Call{Call: _e.mock.On("Create", link)}
}

func (_c *Repo_Create_Call) Run(run func(link *domain.Link)) *Repo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Link))
	})
	return _c
}

func (_c *Repo_Create_Call) Return(_a0 *domain.Link, _a1 error) *Repo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Create_Call) RunAndReturn(run func(*domain.Link) (*domain.Link, error)) *Repo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinkByShortURL provides a mock function with given fields: shortURL
func (_m *Repo) GetLinkByShortURL(shortURL string) (*domain.Link, error) {
	ret := _m.Called(shortURL)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkByShortURL")
	}

	var r0 *domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Link, error)); ok {
		return rf(shortURL)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Link); ok {
		r0 = rf(shortURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_GetLinkByShortURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinkByShortURL'
type Repo_GetLinkByShortURL_Call struct {
	*mock.Call
}

// GetLinkByShortURL is a helper method to define mock.On call
//   - shortURL string
func (_e *Repo_Expecter) GetLinkByShortURL(shortURL interface{}) *Repo_GetLinkByShortURL_Call {
	return &Repo_GetLinkByShortURL_Call{Call: _e.mock.On("GetLinkByShortURL", shortURL)}
}

func (_c *Repo_GetLinkByShortURL_Call) Run(run func(shortURL string)) *Repo_GetLinkByShortURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repo_GetLinkByShortURL_Call) Return(_a0 *domain.Link, _a1 error) *Repo_GetLinkByShortURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_GetLinkByShortURL_Call) RunAndReturn(run func(string) (*domain.Link, error)) *Repo_GetLinkByShortURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinkByURL provides a mock function with given fields: url
func (_m *Repo) GetLinkByURL(url string) (*domain.Link, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkByURL")
	}

	var r0 *domain.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Link, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Link); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_GetLinkByURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinkByURL'
type Repo_GetLinkByURL_Call struct {
	*mock.Call
}

// GetLinkByURL is a helper method to define mock.On call
//   - url string
func (_e *Repo_Expecter) GetLinkByURL(url interface{}) *Repo_GetLinkByURL_Call {
	return &Repo_GetLinkByURL_Call{Call: _e.mock.On("GetLinkByURL", url)}
}

func (_c *Repo_GetLinkByURL_Call) Run(run func(url string)) *Repo_GetLinkByURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repo_GetLinkByURL_Call) Return(_a0 *domain.Link, _a1 error) *Repo_GetLinkByURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_GetLinkByURL_Call) RunAndReturn(run func(string) (*domain.Link, error)) *Repo_GetLinkByURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
